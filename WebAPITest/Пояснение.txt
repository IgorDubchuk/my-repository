Домен - чемпионат мира формулы 1
Задумка - 3 сервиса
	1 - Адаптер сайта о формуле 1 - грабит сайт и отправляет события в сервис через брокер
			-в его части работа не начиналась, и может, и не начнется никогда, посмотрим
	2 - Обработчик событий, работает с событиями, в нем делается кустарная реализация ивентсорсинга, то есть:
			-пока на разные проекты не разделен, но я хочу разделить и сделать его, как отдельный микросервис
				-пока что есть только папки верхнего уровня, вместо них как раз будут соответствующие проекты
			-он ловит события на вход в формате DTO, делает из них события в доменной модели - ConsumedEvent
				-пока что события в него отправляю через контроллер EventController, потом хочу заменить на брокер сообщений
			-сделан транзиент сервис слоя application - вызывается из контроллера и обращается к репозиторию для сохранения событий
			-он кладет события в базу в денормализованном виде, для этого сделана модель ConsumedEventDbModel			
				-при сохранении события всем событиям, у которых дата больше вновь полученного, ставится статус ToRepeatProcess
			-событий много типов, пока реализована обработка двух типов для примера
			-сделан синглтон-сервис слоя application - обработчик принятых событий в один поток
				-пока запускается также по контроллеру, route   process-event
				-обрабатывает все ивенты из базы, которые либо не обработаны, либо требуют повторной обработки
				-предполагается сделать повторный запуск этого обработчика через временной промежуток
			-сделан транзиент сервис слоя domain - в нем доменная логика обработки событий, ничего не знающая про ивентсорсинг (это осталось в слое application)
				-в нем перегрузки метода ProcessEvent для разных типов событий
				-он оркестрирует методы доменный сущностей, реализует логику, которая в них не влезла
				-тут же будет отправка доменных событий PublishedEvent
	3 - Реализация CQRS
			-в его части работа не начиналась, но точно начнется
			-он будет ловить события от второго сервиса и строить модель на чтение под конкретные запросы
			-там будут контроллеры для получения данных
			-типа предполагается, что нагрузка на запись, то есть на изменение данных в доменной модели, будет не большая, а на чтение - большая
			-он по идее должен хорошо горизонтально масштабироваться
Доп. информация
	-В папку controller/test не нужно смотреть, там я потренировался делать версионирование апи
	-ничего не делалось на тему асинхронности
	-пока не особо думал об отказоустойчивости и обработке ошибок
	-не особо анализировались модификаторы доступа классов и их членов
	-не делалось логирование, аутентификация и авторизация
	
Что хочется дальше
	-разбить на проекты
	-вынести в докер-кубер
	-возможно, даже в облако
	-сделать логирование, авторизацию, аутентификацию
	-прикрутить брокер, пока что рэббит, так как он у нас применяется в компании
	-прикрутить юниттесты
	-сделать защищенное взаимодействие с кроликом, между сервисами
	-сделать какой-то бенчмаркинг для решения, оптимизировать под производительность на больших кол-вах запросов
		-попробовать разные коллекции, например, и/или параллелизм